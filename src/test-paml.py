#! /usr/local/bin/python

import sys, os, math, string, random, pickle, shutil
import paml, newick, translate, geneutil, muscle, biofile

def nearlyEqual(x,y):
	return abs(x-y) < 1e-6

def test001():
	print "** Test 001 **"
	seqs = ["TTGGCTAATATCAAATCAGCTAAGAAGCGCGCCATTCAGTCTGAAAAGGCTCGTAAGCACAACGCAAGCCGTCGCTCTATGATGCGTACTTTCATCAAGAAAGTATACGCAGCTATCGAAGCTGGCGACAAAGCTGCTGCACAGAAAGCATTTAACGAAATGCAACCGATCGTGGACCGTCAGGCTGCTAAAGGTCTGATCCACAAAAACAAAGCTGCACGTCATAAGGCTAACCTGACTGCACAGATCAACAAACTGGCT", \
			"TTGGCTAATATCAAATCAGCTAAGAAGCGCGCCGTTCAGTCTGAAAAGGCTCGTAAGCACAACGCAAGCCGTCGCTCTATGATGCGTACTTTCATCAAGAAAGTATACGCAGCTATCGAAGCTGGCGACAAAGCTGCTGCACTGAAAGCATTTAACGAAATGCAACCGATCGTGGACCGTCAGGCTGCTAAAGGTCTGATCCACAAAAACAAAGCTGCACGTCATAAAGCTAACCTGACTGCACAGATCAACAAACTGGCT", \
			"TTG---AATATCAAATCAGCTAAGAAGCGC------CAGTCTGTAAAGGCTCGTACGCACAACGGAAGCCGTCGATCTATGATGCGTAGTTTCATCAAGAAAGTATACGCAGCTTTCGAAGCTGGCGACAAGGCTGCTGCACAGAAAGCATTTAACGAAATGCAACCGATCGTAGACCGTCAGGCTGCTTTAGGTCTGATCCACAAAAACAAAGCTGACCGTCATAAAGCTAACCGGACTGCACAGATCAATTTACTGACT", \
			"TTG---AATATCAAATCAGCTAAGAAGCGC------CAGTCTGTAAAGGCTCGTACGCACAACGCAAGCCGTCGCTCTATGATGCGTACTTTCATCAAGAAAGTATACGCAGCTATCGAAGCTGGCGACAAAGCTGCTGCACTGAAAGCATTTAACGAAATGCAACCGATCGTGGACCGTCAGGCTGCTAAAGGTCTGATCCACAAAAACAAAGCTGACCGTCATAAAGCTAACCGGACTGCACAGATCAATTTACTGACT"]
	tree_string = "(s4,(s1,s2),s3);"
	seq_labels=["s1","s2","s3","s4"]
	rate_tree = newick.tree.parseTree(tree_string)
	opts = paml.CodeML.FMutSel_F_options
	opts["RateAncestor"] = "1"
	cm = paml.CodeML("codon", opts)
	cm.loadSequences(seqs, seq_labels, tree_string)
	cm.run()
	cm.putBranchRatesOnTree(seq_labels, rate_tree)
	cm.putAncestralSequencesOnTree(seq_labels, rate_tree, label="sequence")
	newick.tree.labelInternalNodes(rate_tree)
	nodes = rate_tree.nodes
	node_dict = dict([(x.name, x) for x in nodes])

	def dNdist(x):
		return x.properties["rate"].dn

	assert nearlyEqual(node_dict["s1"].measureFrom(node_dict["s2"], dNdist), 0.0078)
	assert nearlyEqual(node_dict["s1_s2_s3_s4"].measureFrom(node_dict["s1_s2"], dNdist), 0.0403)
	assert nearlyEqual(node_dict["s4"].measureFrom(node_dict["s3"], dNdist), 0.0379)
	assert nearlyEqual(node_dict["s1_s2"].measureFrom(node_dict["s3"], dNdist), 0.0782)
	#for i in range(len(nodes)-1):
	#	for j in range(i+1,len(nodes)):
	#		dist = nodes[i].measureFrom(nodes[j], dNdist)
	#		print nodes[i].name, nodes[j].name, dist
	assert str(rate_tree) == str(newick.tree.parseTree("%s" % rate_tree))

	anc_seq = "LNIKSAKKRQSVKARTHNASRRSMMRTFIKKVYAAIEAGDKAAALKAFNEMQPIVDRQAAKGLIHKNKADRHKANRTAQINLLT"
	assert translate.translate(node_dict["s1_s2_s3_s4"].properties["sequence"]) == anc_seq
	shutil.rmtree(cm.tmpdir)

def test002():
	print "** Test 002 **"
	tree = newick.tree.parseTree("((((scer,spar),smik),sbay),scas);")
	newick.tree.labelInternalNodes(tree)
	node_dict = dict([(x.name,x) for x in tree.nodes])
	assert node_dict["scer"].getMostRecentCommonAncestor(node_dict["smik"]).name == "scer_smik_spar"

def test003():
	print "** Test 003 **"
	# Tree remapping
	whole_tree = newick.tree.parseTree("((((scer,spar),smik),sbay),scas);")
	sub_tree = newick.tree.parseTree("((scer,smik),scas);")

	# Name nodes on whole tree
	newick.tree.labelInternalNodes(whole_tree)

	if False:
		# Only need to do this if you want more/other data.
		# Load the genes
		load_fxn = biofile.getIDFunction("vanilla")
		cdna_dicts = {}
		geneutil.readGenomesFromFile(os.path.expanduser("~/research/data/scerevisiae/saccharomyces-files.txt"), os.path.expanduser("~/bio/genomes"), cdna_dicts, 1, load_fxn)

		align_dict = pickle.load(file(os.path.expanduser("~/research/data/scerevisiae/scer-ortholog-alignments.p"),'r'))
		(nal, spec_orf_list, protal) = align_dict["YBR177C"]
		aligned_seqs = {}
		for xi in range(len(spec_orf_list)):
			(spec,orf) = spec_orf_list[xi]
			gene = cdna_dicts[spec][orf]
			prot = protal[xi]
			aligned_gene = muscle.alignGeneFromProtein(gene, prot)
			aligned_seqs[spec] = aligned_gene
		print aligned_seqs

	seq_dict = {'spar': 'ATGTCAGAAGTTTCGAAATGGCCAGCTATCAACCCGTTCCATTGGGGATACAATGGTACTGTTTCACATGTCGTCGGTGAAAATGGTTCCATCAAACTAAATTTAAAAGACAACAAGGAACAGGTTGAATTTGACGAGTTCGTTAACAAATATGTCCCAACGTTGAAGAATGGTGCTCAATTTAAATTGAGTCCTTACTTGTTCACAGGTATTTTGCAAACCCTGTACTTAAATGCTGCTGATTTCTCTAAGAAATTTCCTGTATTCTACGGCAGAGAAATTGTCAAATTCTCGGATAATGGAGTTTGTACCGCTGACTGGCTCATGGATTCCTGGAAGAAGGATTACAAACTCGATCAAAGTACTATGGGTTTCGATAAGAAAAAATTTGGTGAAGACGAGAAGGAGACGCATCCAGAAGGGTGGCCTCGTTTACAACCACGTACAAGGTATCTGAAGGATAATGAATTGGAAAATGTAAGGGAGGTTGATCTGCCCTTAGTAGTTATCCTACATGGTCTTGCTGGTGGTAGTCATGAGCCTATCATAAGATCTCTTGCTGAAAACCTCTCTCGG------AGTGGGAGATTTCAAGTGGTGGTACTAAATACTAGAGGCTGTGCACGTTCTAAAATTACAACCAGAAATTTATTTACGGCTTACCACACAATGGATATTCGTGAATTTTTGCAAAGAGAAAAGGAGAGATATCCAAATAGAAAATTATACGCTGTGGGATGCTCCTTCGGTGCTACGATGTTGGGAAACTATCTGGGAGAAGAAGGCGATAAATCTCCTTTATCTGCAGCTGCTACCCTGTGCAACCCTTGGGATCTTCTCCTTTCGGCACTTAGAATGACCGAGGATTGGTGGTCAAAGACTTTATTTTCCAAAAATATTGCCCAATTCTTAACAAGAACTGTTCAAGTTAATATGGGTGAACTAGGAGTTCCAAATGGCTCCCGTCCTGACCATCCTCCCACAGTCAAGAATCCATCTTACTATATGTTCACACCTGAAAATCTAATAAAGGCAAAAAGCTTTAAATCGAGTCTGGAATTTGATGAATTGTACACTGCGCCTGCTTTAGGCTTCCCAAATGCTATGGAATATTATAAAGCGGCCAGCTCAATAAGCAGAGTTGATACAATTCGGGTTCCTACTCTAGTTATCAATTCAAGGGATGATCCTGTTGTCGGCCCGGATCAA---CCTTACTCAATCGTGGAAAAAAATCCTCGTGTTTTGTATTGTAGAACCGACTTAGGAGGTCATTTAGCTTACCTAGATAAAGACAATAATTCGTGGGCTACCAAGGCGATTGCAGAATTCTTTACTAAGTTTGATGAATTAGTTGTA', \
				'smik': 'ATGTCAGAAGTTTCGAAATGGCCAGCTATCAACCCATTCCATTGGGGATACAATGGTACTGTTTCGCATGTTGTCGGTGAAAATGGTTCCATGAAACTAGGTTTAAAAGATAACAAGGAACAGATTGAATTTGATCAGTTCGTTAACAAATATGTTCCAAGTTTGAAGAATGGTGCTCACTTCAAATTGAGTCCTTACTTGTTCACAGGTATTTTACAAACGTTGTACTTAAACGCTGCAGACTTCTCGAAGAAATTTCCTGTATTTTATGGCAGAGAAATTATCAAATTCTCCGATAATGGAGTTTGCACCGCTGATTGGGTTATGAGCTCCTGGAAGAGGGATTACAAACTCAATCAAAGTACCATGAGCTTTGATAAAAGCAAATTCGACGGAGACGAAAAAGCGACGCATCCAGAAGGATGGCCTCGTTTACAACCACGTACAAGATATTTGAAGGATAATGAGTTAGAGGAGCTCAGAGAAATTGAGCTCCCCTTAGTAGTCATTTTGCATGGACTTGCCGGTGGCAGTCATGAACCGATCATAAGATCTCTTGCTGAAAACCTGTCTCGC------AGCGGGAAATTTCAAGTGGTGGTGCTAAATACCAGAGGTTGTGCACGCTCCAAAATTACAACCAGGAACTTATTCACGGCTTACCACACAATGGATATCCGTGAATTTTTGCAAAGAGAAAATCAAAGACATCCAAACAGAAAGTTATACGCTGTAGGATGTTCTTTTGGTGCCACCATGTTGGGGAATTATCTCGGTGAAGAAGGTGATAAATCACCTTTATCTGCAGCTGCTACCTTATGCAATCCTTGGGACCTTCTCCTTTCAGCGCTTAGAATGACCGAGGATTGGTGGTCAAAAACTTTATTTTCCAAAAATATTGCACAGTTTTTAACAAGAACCGTTCAAGTTAACATGGGTGAACTAGGAGTCCCAAACGGCTCTCATCCCGACCATCCTCCTACAGTAAAAAATCCATCCTACTATATGTTCACCCCTGAAAATTTAATAAAGGCAAAACACTTCAAATCGAGTCTGGAATTCGATGAATTGTATACTGCACCTGCTTTAGGCTTTCCAAATGCAATGGAGTATTATAAAGCAGCTAGCTCAATAAACAGAGTTGCTACAATTAAGGTTCCTACTTTAGTTATCAATTCTAGAGATGATCCTGTTGTCGGCCCAGATCAG---CCTTATTCAATTGTAGAAAAAAACCCTCGTATTTTGTATTGCGGAACCGATTTAGGGGGCCATTTAGCCTACCTAGATAATGACAATAACTCATGGGCAACTAAGGCGATTGCAGAATTCTTTACTAAATTTGATCAACTGGTTGTA', \
				'scas': 'ATGGCTTCACAATCAACATATCCACTCATTAAACCATGGAATTGGGGGTATCACGGAACCGTGACCCAAATTACCAGTAAGGAAGGTACTGTACTCATTCCATTAAAGGACAACAAAGAGGGTATTCCATTAGCAGAATTAGTTTCAAAGAATGTCCCTAGTTTAAAGGATGGTGCTAAGTTTGAGTTGAAACCTTTTTTATTCACTGGTATTTTACAAACTCTGTACCTTGGCGCAGCTGACTTTTCTAAGAAATTCCAAGTCTTTTATGGTAGAGAAATTGTGGAATTCTCAGATACTGGTGTATGTACTGCCGATTGGGTAATGCCATCTTGGAAGCAAAAATATAACTTTAATGAGAAAACATCAACTTTTGACAAGAAAGCATTCGACCTGGACGAAAAAGAAACACATCCAGACAATTGGCCTCGTTTGCAACCTCGTACCAGATACTTAAATGAAAAAGAAATGACGACTATCCACGAGGATGACAGACCATTGGTTGTTTGTTGTCATGGGTTAGCTGGTGGCTCTCACGAACCAATTATCAGATCATTGACTGAAAATCTATCTAAGGTTGGTAATGGGAAATTCCAAGTGGTTGTCCTAAATACTCGTGGCTGTGCACGTTCTAAGATTACTACTCGTAACCTATTTACTGCTTTCCATACTATGGATCTACGTGAATTTGTCAACAGAGAACACCAAAAACATCCTAACAGAAAGATTTATGCCGTTGGATTTTCATTCGGGGGTACAATGTTAGCAAATTATTTAGGAGAAGAAGGTGATAAAACTCCAATTGCATCTGCTGCAGTGTTATGTAACCCGTGGGATATGGTATTATCCGGTATGAAAACGAGAGATGATTTTTGGACAAGAACGCTATTTGCTAAGAATATTACAGATTTCTTGACTAGAATGGTTAAAGTTAATATGGCAGAATTGGAATCTCCAGATGGTTCTAAGCCTGATCACATCCCAACAGTGAAAAATCCATCTTATTATACATTTACCCAAGAAAATTTGGCAAAAGCCAAGGATTTTAAATTAATATCTGACTTTGATGACGTATTTACTGCACCTGCATTGGGTTTCAAAAACGCATTGGAGTACTACGCTGCAGCTGGGTCCATTAACAGACTACCTAATATTAAGATTCCTTTATTAGTTATCAATTCCACTGATGATCCAGTTGTTGGGCCGGATCCAATCCCAAACCATATCATAGATTCAAACAACCACCTACTGCTATGTGAAACCGATATCGGTGGCCATTTGGCATATTTGGATAAAAATAATGATTCATGGTCAACGAACCAAATCGCCAATTATTTCGACAAATTTGATGAAGTGGCATTA', \
				'sbay': 'ATGTCAGAAGTTTCAAAGTGGCCAGCTATTAACCCATTTCATTGGGGGTACAACGGTACAGTTTCACATGTCGTTGGTGGTAATGGTTCTGTGAAGTTAAGCTTGAAGAGCGATAAGGAGCAAGTCGAGTTTGATACGTTTGTTAATAAATATGTCCCGATTCTGAAAAACGGGGCCCATTATAAACTAAGTCCCTACTTGTTCACAGGTATTTTACAAACCCTATACTTGAACGCTGCTGATTTCTCAAAGAAATTTCCCGTATTTTATGGTAGAGAAATCGTCAAGTTCTCGGATGACGGTGTCTGTACTGCTGATTGGGTCATGAACTCTTGGGAAAAGGAATATGATTTCGACCAAAAGACTATGAAATTTGATACGAAGAAGTTTGGCGACGACGAAAAGGCGACGCACCCAGAAGGATGGCCTCGTTTACAACCACGTACGAGGTACCTCAGGGACGAAGAGTTGGAAGAACAGAGAAAAGTAGATCTTCCCCTAGTTATCATCCTCCATGGTCTTGCCGGAGGCAGTCATGAACCAATCATAAGATCCCTAACTGAGAACTTGTCTCGTATCGGCAATGGGAGATTCCAAGTCGTGGTGCTAAACACGAGAGGCTGTGCACGTTCTAAAATCACCACTAGAAACCTATTCACAGCTTACCACACAATGGATATCCGTGAGTTCTTGCAAAGGGAAAAAGAAAGATATCCAAACAGAAAATTATACACTGTAGGGTGCTCTTTCGGGGCTACCATGTTAGCAAACTATTTGGGTGAAGAAGGTGACAAATCACCTGTATCTGCTGCTGTTACGTTATGTAATCCTTGGGATCTTCTTCTTTCGGCACTTAGAATGACTGAAGACTGGTGGTCAAAAACTTTGTTTTCTAAAAATATTGCCCAATTTTTAACAAGAACCGTTCAAGTTAACATGGGCGAATTAGGTGTTCCAAATGGCTCTCGTCCTGACCATACACCTACAGTTAAAAATCCATCTTACTATAAGTTCACACCTGAGAATTTGATGAAGGCAAAGCGCTTTAAGTCGAGTCTCGAATTCGATGAGCTGTACACTGCACCAGCTTTGGGCTTCCCGAATGCTATGGAATATTATAAATCAGCTAGTTCAATCAACAGGGCTGATAAAATCAAGGTTCCTACTTTAGTAATCAATTCTAGAGATGATCCTGTTGTTGGCCCAGACCAA---CCTTATTCATTTGTGGAGAAGAACCCTAATATACTATTCTGTAGAACCGACCTAGGTGGCCATTTAGCCTACCTAGATAGCAACAATGATTCGTGGGTTACAAAGGCGATTTCCGAGTTCTTGAATAAGTTTGAGGAGTTAGTGTTA',
				'scer': 'ATGTCAGAAGTTTCCAAATGGCCAGCAATCAACCCATTCCATTGGGGATACAATGGTACAGTTTCGCATATTGTCGGTGAAAATGGTTCCATTAAACTCCATTTAAAAGACAACAAGGAGCAAGTTGATTTTGACGAGTTCGCTAACAAATATGTCCCAACGTTGAAGAATGGTGCCCAATTCAAATTGAGTCCTTACTTGTTCACAGGTATTTTGCAAACTTTGTACTTAGGTGCTGCTGATTTCTCTAAGAAATTTCCTGTATTCTACGGCAGGGAAATTGTCAAATTCTCGGATGGTGGAGTTTGCACCGCTGACTGGCTCATAGATTCATGGAAAAAGGATTATGAATTCGATCAAAGTACTACGAGCTTTGATAAAAAAAAATTTGATAAAGACGAGAAGGCGACACATCCAGAAGGATGGCCTCGTTTACAACCACGTACAAGGTACCTGAAAGATAATGAGTTGGAAGAACTACGGGAGGTTGATCTACCCCTAGTAGTTATTCTACATGGTCTTGCTGGTGGTAGTCATGAGCCGATTATAAGATCTCTTGCTGAAAACCTGTCTCGC------AGTGGGAGATTTCAAGTGGTCGTCCTAAATACCAGAGGTTGTGCACGTTCCAAAATTACCACCAGAAATTTATTTACAGCTTATCACACAATGGATATTCGCGAGTTTTTGCAAAGAGAAAAGCAAAGACATCCAGATAGAAAACTATACGCTGTGGGATGCTCTTTTGGTGCTACGATGCTGGCAAACTATCTGGGAGAAGAGGGCGATAAATCACCTTTATCCGCAGCTGCTACTTTGTGCAATCCTTGGGATCTTCTCCTTTCAGCAATTAGGATGAGCCAGGATTGGTGGTCAAGAACTTTATTTTCCAAAAATATTGCGCAATTCTTAACAAGAACCGTTCAGGTTAATATGGGTGAATTAGGAGTTCCAAATGGCTCTCTCCCCGATCATCCTCCCACAGTCAAGAATCCATCTTTCTATATGTTCACGCCTGAAAATCTAATAAAGGCAAAGAGCTTTAAATCGACCCGGGAATTTGATGAAGTGTACACTGCGCCTGCTTTAGGCTTCCCAAATGCTATGGAGTATTATAAAGCGGCCAGCTCAATAAACAGAGTTGATACAATTCGGGTTCCTACCCTTGTTATCAATTCCAGGGATGATCCTGTTGTCGGCCCAGATCAA---CCATACTCAATCGTGGAAAAGAATCCTCGTATTTTGTATTGTAGAACCGATTTAGGTGGTCATTTAGCTTACCTAGATAAAGACAACAACTCGTGGGCTACCAAGGCAATTGCAGAATTTTTCACTAAGTTTGATGAATTAGTCGTA'}
	seq_labels = [x.name for x in sub_tree.leaves]
	seqs = [seq_dict[k] for k in seq_labels]
	# Run PAML
	opts = paml.CodeML.FMutSel_F_options
	opts["RateAncestor"] = "1"
	cm = paml.CodeML("codon", opts)
	cm.loadSequences(seqs, seq_labels, str(sub_tree))
	cm.run()
	cm.putBranchRatesOnTree(seq_labels, sub_tree, label="rate")
	cm.putAncestralSequencesOnTree(seq_labels, sub_tree, label="sequence")

	# Now remap the tree.
	whole_node_dict = dict([(x.name, x) for x in whole_tree.nodes])
	sub_node_dict = dict([(x.name, x) for x in sub_tree.nodes])
	sub_names = [x.name for x in sub_tree.leaves]
	#print whole_node_dict["scer"].getMostRecentCommonAncestor(whole_node_dict["smik"]).name

	newick.tree.mapLabelsOntoSubtree(whole_tree, sub_tree)
	for i in range(len(sub_names)-1):
		for j in range(i+1, len(sub_names)):
			s1 = sub_names[i]
			s2 = sub_names[j]
			sub_mrca = sub_node_dict[s1].getMostRecentCommonAncestor(sub_node_dict[s2])
			mrca = whole_node_dict[s1].getMostRecentCommonAncestor(whole_node_dict[s2])
			assert sub_mrca.name == mrca.name
	shutil.rmtree(cm.tmpdir)

def test004():
	print "** Test 004 **"
	seqs = ["TTGGCTAATATCAAATCAGCTAAGAAGCGCGCCATTCAGTCTGAAAAGGCTCGTAAGCACAACGCAAGCCGTCGCTCTATGATGCGTACTTTCATCAAGAAAGTATACGCAGCTATCGAAGCTGGCGACAAAGCTGCTGCACAGAAAGCATTTAACGAAATGCAACCGATCGTGGACCGTCAGGCTGCTAAAGGTCTGATCCACAAAAACAAAGCTGCACGTCATAAGGCTAACCTGACTGCACAGATCAACAAACTGGCT", \
			"TTGGCTAATATCAAATCAGCTAAGAAGCGCGCCGTTCAGTCTGAAAAGGCTCGTAAGCACAACGCAAGCCGTCGCTCTATGATGCGTACTTTCATCAAGAAAGTATACGCAGCTATCGAAGCTGGCGACAAAGCTGCTGCACTGAAAGCATTTAACGAAATGCAACCGATCGTGGACCGTCAGGCTGCTAAAGGTCTGATCCACAAAAACAAAGCTGCACGTCATAAAGCTAACCTGACTGCACAGATCAACAAACTGGCT", \
			"TTG---AATATCAAATCAGCTAAGAAGCGC------CAGTCTGTAAAGGCTCGTACGCACAACGGAAGCCGTCGATCTATGATGCGTAGTTTCATCAAGAAAGTATACGCAGCTTTCGAAGCTGGCGACAAGGCTGCTGCACAGAAAGCATTTAACGAAATGCAACCGATCGTAGACCGTCAGGCTGCTTTAGGTCTGATCCACAAAAACAAAGCTGACCGTCATAAAGCTAACCGGACTGCACAGATCAATTTACTGACT", \
			"TTG---AATATCAAATCAGCTAAGAAGCGC------CAGTCTGTAAAGGCTCGTACGCACAACGCAAGCCGTCGCTCTATGATGCGTACTTTCATCAAGAAAGTATACGCAGCTATCGAAGCTGGCGACAAAGCTGCTGCACTGAAAGCATTTAACGAAATGCAACCGATCGTGGACCGTCAGGCTGCTAAAGGTCTGATCCACAAAAACAAAGCTGACCGTCATAAAGCTAACCGGACTGCACAGATCAATTTACTGACT"]
	tree_string = "(s4,(s1,s2),s3);"
	seq_labels=["s1","s2","s3","s4"]
	rate_tree = newick.tree.parseTree(tree_string)
	opts = paml.CodeML.FMutSel_F_options
	opts["RateAncestor"] = "1"
	tmp_dirname = 'tmp-paml-%s' % ''.join(random.sample(string.letters, 10))
	cm = paml.CodeML("codon", opts, tmpdir=tmp_dirname)
	cm.loadSequences(seqs, seq_labels, tree_string)
	cm.run()
	target_fname = os.path.join(cm.tmpdir, cm.default_options["outfile"])
	assert(os.path.exists(target_fname))
	cm.putBranchRatesOnTree(seq_labels, rate_tree)
	cm.putAncestralSequencesOnTree(seq_labels, rate_tree, label="sequence")
	newick.tree.labelInternalNodes(rate_tree)
	nodes = rate_tree.nodes
	node_dict = dict([(x.name, x) for x in nodes])

	def dNdist(x):
		return x.properties["rate"].dn

	assert nearlyEqual(node_dict["s1"].measureFrom(node_dict["s2"], dNdist), 0.0078)
	assert nearlyEqual(node_dict["s1_s2_s3_s4"].measureFrom(node_dict["s1_s2"], dNdist), 0.0403)
	assert nearlyEqual(node_dict["s4"].measureFrom(node_dict["s3"], dNdist), 0.0379)
	assert nearlyEqual(node_dict["s1_s2"].measureFrom(node_dict["s3"], dNdist), 0.0782)
	#for i in range(len(nodes)-1):
	#	for j in range(i+1,len(nodes)):
	#		dist = nodes[i].measureFrom(nodes[j], dNdist)
	#		print nodes[i].name, nodes[j].name, dist
	assert str(rate_tree) == str(newick.tree.parseTree("%s" % rate_tree))

	anc_seq = "LNIKSAKKRQSVKARTHNASRRSMMRTFIKKVYAAIEAGDKAAALKAFNEMQPIVDRQAAKGLIHKNKADRHKANRTAQINLLT"
	assert translate.translate(node_dict["s1_s2_s3_s4"].properties["sequence"]) == anc_seq
	shutil.rmtree(cm.tmpdir)

def test005():
	print "** Test 005 **"
	(headers,seqs) = biofile.readFASTA("test-paml/paml-test-seqfile-0001.txt")
	tree = newick.tree.parseTree(file("test-paml/paml-test-treefile-0001.txt", 'r').readlines()[1])
	cm = paml.CodeML("codon", paml.CodeML.FMutSel_F_options)
	cm.loadSequences(seqs, headers, str(tree))
	cm.run()
	cm.putBranchRatesOnTree(headers, tree)
	cm.cleanUp()
	


if __name__=="__main__":
	test001()
	test002()
	test003()
	test004()
	test005()
	print "** All tests passed **"


